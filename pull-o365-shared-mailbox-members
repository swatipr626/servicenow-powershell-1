$MIDUser=$env:SNC_MIDUser;
$MIDPassword=$env:SNC_MIDPassword;
$SNOWUser=$env:SNC_SNOWUser;
$SNOWPassword=$env:SNC_SNOWPassword;

Get-PSSession | Remove-PSSession

$username = $MIDUser
$password = $MIDPassword | ConvertTo-SecureString -asPlainText -Force
$Ocred = New-Object -typename System.Management.Automation.PSCredential -argumentlist $username,$password

$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $Ocred -Authentication Basic -AllowRedirection -Verbose
Import-PSSession $Session -AllowClobber

# Username and Password that has rights to create records 
$user = $SNOWUser
$pass = $SNOWPassword

# Build auth header
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

# Set proper headers
$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
$headers.Add('Accept','application/json')
$headers.Add('Content-Type','application/json')

# Specify endpoint uri
$uri = "https://<your_instance>.service-now.com/api/aurc/shared_mailbox_members"

# Specify HTTP method
$method = "POST"

$Mailboxes = Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize:Unlimited | Where-Object {$_.WhenChanged -ge ((Get-Date).Adddays(-10))} | select identity,displayname,primarySmtpAddress,Alias,Owner | sort displayname

#$Mailboxes = Get-Mailbox -RecipientTypeDetails SharedMailbox -ResultSize:Unlimited | select identity,displayname,primarySmtpAddress,Alias,Owner | sort displayname

foreach ($mailbox in $mailboxes) {$permissions = Get-MailboxPermission -Identity $mailbox.Identity | Where-Object {($_.AccessRights -eq "FullAccess") -and -not ($_.User -like "NT AUTHORITY\SELF" -or $_.User -like "S-1-5-21*" -or $_.User -like "APCPR03A001\*") -and ($_.IsInherited -eq $false)};
foreach ($member in $permissions) { $sharedMailbox = $member.Identity; $User = $member.User;
$body = "{'u_identity':'$SharedMailbox','u_user':'$User'}";
$response = Invoke-WebRequest -Headers $headers -Method $method -Uri $uri -Body $body -UseBasicParsing;
$response.RawContent;
$body
}
}

##Write-Output ("VF - " + $permisions);

Remove-PSSession $Session
